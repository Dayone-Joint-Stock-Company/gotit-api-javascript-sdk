/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPBADREQUEST from '../model/HTTPBADREQUEST';
import HTTPINTERNALSERVERERROR from '../model/HTTPINTERNALSERVERERROR';
import HTTPNOTFOUND from '../model/HTTPNOTFOUND';
import HTTPUNAUTHORIZED from '../model/HTTPUNAUTHORIZED';
import PRODUCTDETAILRESPONSE from '../model/PRODUCTDETAILRESPONSE';
import PRODUCTSRESPONSE from '../model/PRODUCTSRESPONSE';
import STORESRESPONSE from '../model/STORESRESPONSE';

/**
* Products service.
* @module api/ProductsApi
* @version 4.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getListOfProducts operation.
     * @callback module:api/ProductsApi~getListOfProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PRODUCTSRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all products master data
     * Returns all products master data
     * @param {String} xGIAuthorization Authorization
     * @param {Number} page Page
     * @param {Number} pageSize Page Size
     * @param {Object} opts Optional parameters
     * @param {Number} [minPrice] Min price
     * @param {Number} [maxPrice] Max price
     * @param {Boolean} [isExcludeStoreListInfo] Stores
     * @param {Number} [storeListPage] Store Page
     * @param {Number} [storeListPageSize] Store Page Size
     * @param {module:api/ProductsApi~getListOfProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PRODUCTSRESPONSE}
     */
    getListOfProducts(xGIAuthorization, page, pageSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling getListOfProducts");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getListOfProducts");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getListOfProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'pageSize': pageSize,
        'minPrice': opts['minPrice'],
        'maxPrice': opts['maxPrice'],
        'isExcludeStoreListInfo': opts['isExcludeStoreListInfo'],
        'storeListPage': opts['storeListPage'],
        'storeListPageSize': opts['storeListPageSize']
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PRODUCTSRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductDetail operation.
     * @callback module:api/ProductsApi~getProductDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PRODUCTDETAILRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product detail data
     * Returns product detail data
     * @param {String} xGIAuthorization Authorization
     * @param {Number} id Product ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isExcludeStoreListInfo] Exclude store list information
     * @param {Number} [storeListPage] Store Page
     * @param {Number} [storeListPageSize] Store Page Size
     * @param {module:api/ProductsApi~getProductDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PRODUCTDETAILRESPONSE}
     */
    getProductDetail(xGIAuthorization, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling getProductDetail");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductDetail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isExcludeStoreListInfo': opts['isExcludeStoreListInfo'],
        'storeListPage': opts['storeListPage'],
        'storeListPageSize': opts['storeListPageSize']
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PRODUCTDETAILRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresOfProduct operation.
     * @callback module:api/ProductsApi~getStoresOfProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/STORESRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stores of this product
     * Returns all stores of this product
     * @param {String} xGIAuthorization Authorization
     * @param {Number} id Product ID
     * @param {module:api/ProductsApi~getStoresOfProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/STORESRESPONSE}
     */
    getStoresOfProduct(xGIAuthorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling getStoresOfProduct");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoresOfProduct");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = STORESRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/products/{id}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
