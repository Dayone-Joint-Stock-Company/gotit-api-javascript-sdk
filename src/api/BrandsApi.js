/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BRANDDETAILRESPONSE from '../model/BRANDDETAILRESPONSE';
import BRANDSRESPONSE from '../model/BRANDSRESPONSE';
import HTTPBADREQUEST from '../model/HTTPBADREQUEST';
import HTTPINTERNALSERVERERROR from '../model/HTTPINTERNALSERVERERROR';
import HTTPNOTFOUND from '../model/HTTPNOTFOUND';
import HTTPUNAUTHORIZED from '../model/HTTPUNAUTHORIZED';

/**
* Brands service.
* @module api/BrandsApi
* @version 4.0.0
*/
export default class BrandsApi {

    /**
    * Constructs a new BrandsApi. 
    * @alias module:api/BrandsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the brandsByProducts operation.
     * @callback module:api/BrandsApi~brandsByProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BRANDDETAILRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get brand by product
     * Returns brand detail data master
     * @param {String} xGIAuthorization Authorization
     * @param {module:api/BrandsApi~brandsByProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BRANDDETAILRESPONSE}
     */
    brandsByProducts(xGIAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling brandsByProducts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BRANDDETAILRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/brands/brandsByProducts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailOfBrand operation.
     * @callback module:api/BrandsApi~getDetailOfBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BRANDDETAILRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get brand detail
     * Returns brand detail data master
     * @param {String} xGIAuthorization Authorization
     * @param {Number} id Brand Id
     * @param {module:api/BrandsApi~getDetailOfBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BRANDDETAILRESPONSE}
     */
    getDetailOfBrand(xGIAuthorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling getDetailOfBrand");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDetailOfBrand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BRANDDETAILRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/brands/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfBrands operation.
     * @callback module:api/BrandsApi~getListOfBrandsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BRANDSRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of brands
     * Retrieve a list of brands
     * @param {String} xGIAuthorization Authorization
     * @param {module:api/BrandsApi~getListOfBrandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BRANDSRESPONSE}
     */
    getListOfBrands(xGIAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling getListOfBrands");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BRANDSRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/brands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
