/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPBADREQUEST from '../model/HTTPBADREQUEST';
import HTTPINTERNALSERVERERROR from '../model/HTTPINTERNALSERVERERROR';
import HTTPNOTFOUND from '../model/HTTPNOTFOUND';
import HTTPUNAUTHORIZED from '../model/HTTPUNAUTHORIZED';
import REQUESTCHECKSTATUSZNS from '../model/REQUESTCHECKSTATUSZNS';
import REQUESTSENDVOUCHERBYEMAIL from '../model/REQUESTSENDVOUCHERBYEMAIL';
import REQUESTSENDVOUCHERBYSMS from '../model/REQUESTSENDVOUCHERBYSMS';
import REQUESTSENDVOUCHERBYZNS from '../model/REQUESTSENDVOUCHERBYZNS';
import VOUCHERCHECKZNSRESPONSE from '../model/VOUCHERCHECKZNSRESPONSE';
import VOUCHERSENDEMAILRESPONSE from '../model/VOUCHERSENDEMAILRESPONSE';
import VOUCHERSENDSMSRESPONSE from '../model/VOUCHERSENDSMSRESPONSE';
import VOUCHERSENDZNSRESPONSE from '../model/VOUCHERSENDZNSRESPONSE';

/**
* VoucherSendMethod service.
* @module api/VoucherSendMethodApi
* @version 4.0.0
*/
export default class VoucherSendMethodApi {

    /**
    * Constructs a new VoucherSendMethodApi. 
    * @alias module:api/VoucherSendMethodApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkStatusZNS operation.
     * @callback module:api/VoucherSendMethodApi~checkStatusZNSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VOUCHERCHECKZNSRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check status zns
     * Check status zns
     * @param {String} xGIAuthorization Authorization
     * @param {Object} opts Optional parameters
     * @param {module:model/REQUESTCHECKSTATUSZNS} [REQUESTCHECKSTATUSZNS] 
     * @param {module:api/VoucherSendMethodApi~checkStatusZNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VOUCHERCHECKZNSRESPONSE}
     */
    checkStatusZNS(xGIAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['REQUESTCHECKSTATUSZNS'];
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling checkStatusZNS");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VOUCHERCHECKZNSRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/vouchers/send/zns/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVoucherByEmail operation.
     * @callback module:api/VoucherSendMethodApi~sendVoucherByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VOUCHERSENDEMAILRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send voucher by mail
     * Send voucher by mail
     * @param {String} xGIAuthorization Authorization
     * @param {Object} opts Optional parameters
     * @param {module:model/REQUESTSENDVOUCHERBYEMAIL} [REQUESTSENDVOUCHERBYEMAIL] 
     * @param {module:api/VoucherSendMethodApi~sendVoucherByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VOUCHERSENDEMAILRESPONSE}
     */
    sendVoucherByEmail(xGIAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['REQUESTSENDVOUCHERBYEMAIL'];
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling sendVoucherByEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VOUCHERSENDEMAILRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/vouchers/send/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVoucherBySMS operation.
     * @callback module:api/VoucherSendMethodApi~sendVoucherBySMSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VOUCHERSENDSMSRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send voucher by sms
     * Send voucher by sms
     * @param {String} xGIAuthorization Authorization
     * @param {module:model/REQUESTSENDVOUCHERBYSMS} REQUESTSENDVOUCHERBYSMS 
     * @param {module:api/VoucherSendMethodApi~sendVoucherBySMSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VOUCHERSENDSMSRESPONSE}
     */
    sendVoucherBySMS(xGIAuthorization, REQUESTSENDVOUCHERBYSMS, callback) {
      let postBody = REQUESTSENDVOUCHERBYSMS;
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling sendVoucherBySMS");
      }
      // verify the required parameter 'REQUESTSENDVOUCHERBYSMS' is set
      if (REQUESTSENDVOUCHERBYSMS === undefined || REQUESTSENDVOUCHERBYSMS === null) {
        throw new Error("Missing the required parameter 'REQUESTSENDVOUCHERBYSMS' when calling sendVoucherBySMS");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VOUCHERSENDSMSRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/vouchers/send/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVoucherByZNS operation.
     * @callback module:api/VoucherSendMethodApi~sendVoucherByZNSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VOUCHERSENDZNSRESPONSE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send voucher by zns
     * Send voucher by zns
     * @param {String} xGIAuthorization Authorization
     * @param {Object} opts Optional parameters
     * @param {module:model/REQUESTSENDVOUCHERBYZNS} [REQUESTSENDVOUCHERBYZNS] 
     * @param {module:api/VoucherSendMethodApi~sendVoucherByZNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VOUCHERSENDZNSRESPONSE}
     */
    sendVoucherByZNS(xGIAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['REQUESTSENDVOUCHERBYZNS'];
      // verify the required parameter 'xGIAuthorization' is set
      if (xGIAuthorization === undefined || xGIAuthorization === null) {
        throw new Error("Missing the required parameter 'xGIAuthorization' when calling sendVoucherByZNS");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-GI-Authorization': xGIAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VOUCHERSENDZNSRESPONSE;
      return this.apiClient.callApi(
        '/api/v4.0/vouchers/send/zns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
