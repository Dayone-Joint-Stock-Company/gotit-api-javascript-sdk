/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import USAGEMETHODSCHEMA from './USAGEMETHODSCHEMA';

/**
 * The BRANDCATEGORYDETAIL model module.
 * @module model/BRANDCATEGORYDETAIL
 * @version 4.0.0
 */
class BRANDCATEGORYDETAIL {
    /**
     * Constructs a new <code>BRANDCATEGORYDETAIL</code>.
     * @alias module:model/BRANDCATEGORYDETAIL
     */
    constructor() { 
        
        BRANDCATEGORYDETAIL.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BRANDCATEGORYDETAIL</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BRANDCATEGORYDETAIL} obj Optional instance to populate.
     * @return {module:model/BRANDCATEGORYDETAIL} The populated <code>BRANDCATEGORYDETAIL</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BRANDCATEGORYDETAIL();

            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'Number');
            }
            if (data.hasOwnProperty('brandNm')) {
                obj['brandNm'] = ApiClient.convertToType(data['brandNm'], 'String');
            }
            if (data.hasOwnProperty('brandLogo')) {
                obj['brandLogo'] = ApiClient.convertToType(data['brandLogo'], 'String');
            }
            if (data.hasOwnProperty('shortDesc')) {
                obj['shortDesc'] = ApiClient.convertToType(data['shortDesc'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('serviceGuide')) {
                obj['serviceGuide'] = ApiClient.convertToType(data['serviceGuide'], 'String');
            }
            if (data.hasOwnProperty('usageMethods')) {
                obj['usageMethods'] = ApiClient.convertToType(data['usageMethods'], [USAGEMETHODSCHEMA]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BRANDCATEGORYDETAIL</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BRANDCATEGORYDETAIL</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandNm'] && !(typeof data['brandNm'] === 'string' || data['brandNm'] instanceof String)) {
            throw new Error("Expected the field `brandNm` to be a primitive type in the JSON string but got " + data['brandNm']);
        }
        // ensure the json data is a string
        if (data['brandLogo'] && !(typeof data['brandLogo'] === 'string' || data['brandLogo'] instanceof String)) {
            throw new Error("Expected the field `brandLogo` to be a primitive type in the JSON string but got " + data['brandLogo']);
        }
        // ensure the json data is a string
        if (data['shortDesc'] && !(typeof data['shortDesc'] === 'string' || data['shortDesc'] instanceof String)) {
            throw new Error("Expected the field `shortDesc` to be a primitive type in the JSON string but got " + data['shortDesc']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['serviceGuide'] && !(typeof data['serviceGuide'] === 'string' || data['serviceGuide'] instanceof String)) {
            throw new Error("Expected the field `serviceGuide` to be a primitive type in the JSON string but got " + data['serviceGuide']);
        }
        if (data['usageMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usageMethods'])) {
                throw new Error("Expected the field `usageMethods` to be an array in the JSON data but got " + data['usageMethods']);
            }
            // validate the optional field `usageMethods` (array)
            for (const item of data['usageMethods']) {
                USAGEMETHODSCHEMA.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Brand id
 * @member {Number} brandId
 */
BRANDCATEGORYDETAIL.prototype['brandId'] = undefined;

/**
 * Brand name
 * @member {String} brandNm
 */
BRANDCATEGORYDETAIL.prototype['brandNm'] = undefined;

/**
 * Link to brand logo image
 * @member {String} brandLogo
 */
BRANDCATEGORYDETAIL.prototype['brandLogo'] = undefined;

/**
 * Brand short description
 * @member {String} shortDesc
 */
BRANDCATEGORYDETAIL.prototype['shortDesc'] = undefined;

/**
 * Brand description
 * @member {String} description
 */
BRANDCATEGORYDETAIL.prototype['description'] = undefined;

/**
 * @member {Number} order
 */
BRANDCATEGORYDETAIL.prototype['order'] = undefined;

/**
 * Describe the brand's terms of reference (T&C). HTML format
 * @member {String} serviceGuide
 */
BRANDCATEGORYDETAIL.prototype['serviceGuide'] = undefined;

/**
 * Information on the brand's applicable channels
 * @member {Array.<module:model/USAGEMETHODSCHEMA>} usageMethods
 */
BRANDCATEGORYDETAIL.prototype['usageMethods'] = undefined;






export default BRANDCATEGORYDETAIL;

