/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PRODUCTPRICESCHEMA from './PRODUCTPRICESCHEMA';
import STOREPRODUCTSCHEMA from './STOREPRODUCTSCHEMA';

/**
 * The PRODUCTV model module.
 * @module model/PRODUCTV
 * @version 4.0.0
 */
class PRODUCTV {
    /**
     * Constructs a new <code>PRODUCTV</code>.
     * @alias module:model/PRODUCTV
     */
    constructor() { 
        
        PRODUCTV.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PRODUCTV</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PRODUCTV} obj Optional instance to populate.
     * @return {module:model/PRODUCTV} The populated <code>PRODUCTV</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PRODUCTV();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('productNm')) {
                obj['productNm'] = ApiClient.convertToType(data['productNm'], 'String');
            }
            if (data.hasOwnProperty('productImg')) {
                obj['productImg'] = ApiClient.convertToType(data['productImg'], 'String');
            }
            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'Number');
            }
            if (data.hasOwnProperty('brandNm')) {
                obj['brandNm'] = ApiClient.convertToType(data['brandNm'], 'String');
            }
            if (data.hasOwnProperty('brandServiceGuide')) {
                obj['brandServiceGuide'] = ApiClient.convertToType(data['brandServiceGuide'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = PRODUCTPRICESCHEMA.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('productDesc')) {
                obj['productDesc'] = ApiClient.convertToType(data['productDesc'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('storeList')) {
                obj['storeList'] = ApiClient.convertToType(data['storeList'], [STOREPRODUCTSCHEMA]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PRODUCTV</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PRODUCTV</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['productNm'] && !(typeof data['productNm'] === 'string' || data['productNm'] instanceof String)) {
            throw new Error("Expected the field `productNm` to be a primitive type in the JSON string but got " + data['productNm']);
        }
        // ensure the json data is a string
        if (data['productImg'] && !(typeof data['productImg'] === 'string' || data['productImg'] instanceof String)) {
            throw new Error("Expected the field `productImg` to be a primitive type in the JSON string but got " + data['productImg']);
        }
        // ensure the json data is a string
        if (data['brandNm'] && !(typeof data['brandNm'] === 'string' || data['brandNm'] instanceof String)) {
            throw new Error("Expected the field `brandNm` to be a primitive type in the JSON string but got " + data['brandNm']);
        }
        // ensure the json data is a string
        if (data['brandServiceGuide'] && !(typeof data['brandServiceGuide'] === 'string' || data['brandServiceGuide'] instanceof String)) {
            throw new Error("Expected the field `brandServiceGuide` to be a primitive type in the JSON string but got " + data['brandServiceGuide']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          PRODUCTPRICESCHEMA.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['productDesc'] && !(typeof data['productDesc'] === 'string' || data['productDesc'] instanceof String)) {
            throw new Error("Expected the field `productDesc` to be a primitive type in the JSON string but got " + data['productDesc']);
        }
        // ensure the json data is a string
        if (data['terms'] && !(typeof data['terms'] === 'string' || data['terms'] instanceof String)) {
            throw new Error("Expected the field `terms` to be a primitive type in the JSON string but got " + data['terms']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        if (data['storeList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storeList'])) {
                throw new Error("Expected the field `storeList` to be an array in the JSON data but got " + data['storeList']);
            }
            // validate the optional field `storeList` (array)
            for (const item of data['storeList']) {
                STOREPRODUCTSCHEMA.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Product Id
 * @member {Number} productId
 */
PRODUCTV.prototype['productId'] = undefined;

/**
 * Product Name
 * @member {String} productNm
 */
PRODUCTV.prototype['productNm'] = undefined;

/**
 * Link product image
 * @member {String} productImg
 */
PRODUCTV.prototype['productImg'] = undefined;

/**
 * Brand id
 * @member {Number} brandId
 */
PRODUCTV.prototype['brandId'] = undefined;

/**
 * Brand name
 * @member {String} brandNm
 */
PRODUCTV.prototype['brandNm'] = undefined;

/**
 * @member {String} brandServiceGuide
 */
PRODUCTV.prototype['brandServiceGuide'] = undefined;

/**
 * @member {String} link
 */
PRODUCTV.prototype['link'] = undefined;

/**
 * @member {module:model/PRODUCTPRICESCHEMA} price
 */
PRODUCTV.prototype['price'] = undefined;

/**
 * @member {String} productDesc
 */
PRODUCTV.prototype['productDesc'] = undefined;

/**
 * @member {String} terms
 */
PRODUCTV.prototype['terms'] = undefined;

/**
 * @member {String} productType
 */
PRODUCTV.prototype['productType'] = undefined;

/**
 * @member {Array.<module:model/STOREPRODUCTSCHEMA>} storeList
 */
PRODUCTV.prototype['storeList'] = undefined;






export default PRODUCTV;

