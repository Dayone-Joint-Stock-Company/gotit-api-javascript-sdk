/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The REQUESTCREATEVOUCHERLINKE model module.
 * @module model/REQUESTCREATEVOUCHERLINKE
 * @version 4.0.0
 */
class REQUESTCREATEVOUCHERLINKE {
    /**
     * Constructs a new <code>REQUESTCREATEVOUCHERLINKE</code>.
     * @alias module:model/REQUESTCREATEVOUCHERLINKE
     * @param orderName {String} Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019
     * @param transactionRefId {String} Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'
     * @param amount {Number} + Voucher value. Ensures the following conditions: + Is a multiple of 1000 + Is within the price range minimum - maximum value that the partner and Got It have agreed upon.
     * @param expiryDate {String} Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.
     * @param useOtp {Number} = 1 if the end user is required to enter a password to view the voucher. Example: 1
     * @param signature {String} RSA encryption, used for client authentication
     */
    constructor(orderName, transactionRefId, amount, expiryDate, useOtp, signature) { 
        
        REQUESTCREATEVOUCHERLINKE.initialize(this, orderName, transactionRefId, amount, expiryDate, useOtp, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderName, transactionRefId, amount, expiryDate, useOtp, signature) { 
        obj['orderName'] = orderName;
        obj['transactionRefId'] = transactionRefId;
        obj['amount'] = amount;
        obj['expiryDate'] = expiryDate;
        obj['use_otp'] = useOtp;
        obj['signature'] = signature;
    }

    /**
     * Constructs a <code>REQUESTCREATEVOUCHERLINKE</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/REQUESTCREATEVOUCHERLINKE} obj Optional instance to populate.
     * @return {module:model/REQUESTCREATEVOUCHERLINKE} The populated <code>REQUESTCREATEVOUCHERLINKE</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new REQUESTCREATEVOUCHERLINKE();

            if (data.hasOwnProperty('orderName')) {
                obj['orderName'] = ApiClient.convertToType(data['orderName'], 'String');
            }
            if (data.hasOwnProperty('transactionRefId')) {
                obj['transactionRefId'] = ApiClient.convertToType(data['transactionRefId'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('use_otp')) {
                obj['use_otp'] = ApiClient.convertToType(data['use_otp'], 'Number');
            }
            if (data.hasOwnProperty('otp_type')) {
                obj['otp_type'] = ApiClient.convertToType(data['otp_type'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('receiver_name')) {
                obj['receiver_name'] = ApiClient.convertToType(data['receiver_name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>REQUESTCREATEVOUCHERLINKE</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>REQUESTCREATEVOUCHERLINKE</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of REQUESTCREATEVOUCHERLINKE.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['orderName'] && !(typeof data['orderName'] === 'string' || data['orderName'] instanceof String)) {
            throw new Error("Expected the field `orderName` to be a primitive type in the JSON string but got " + data['orderName']);
        }
        // ensure the json data is a string
        if (data['transactionRefId'] && !(typeof data['transactionRefId'] === 'string' || data['transactionRefId'] instanceof String)) {
            throw new Error("Expected the field `transactionRefId` to be a primitive type in the JSON string but got " + data['transactionRefId']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['receiver_name'] && !(typeof data['receiver_name'] === 'string' || data['receiver_name'] instanceof String)) {
            throw new Error("Expected the field `receiver_name` to be a primitive type in the JSON string but got " + data['receiver_name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

REQUESTCREATEVOUCHERLINKE.RequiredProperties = ["orderName", "transactionRefId", "amount", "expiryDate", "use_otp", "signature"];

/**
 * Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019
 * @member {String} orderName
 */
REQUESTCREATEVOUCHERLINKE.prototype['orderName'] = undefined;

/**
 * Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'
 * @member {String} transactionRefId
 */
REQUESTCREATEVOUCHERLINKE.prototype['transactionRefId'] = undefined;

/**
 * + Voucher value. Ensures the following conditions: + Is a multiple of 1000 + Is within the price range minimum - maximum value that the partner and Got It have agreed upon.
 * @member {Number} amount
 */
REQUESTCREATEVOUCHERLINKE.prototype['amount'] = undefined;

/**
 * Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.
 * @member {String} expiryDate
 */
REQUESTCREATEVOUCHERLINKE.prototype['expiryDate'] = undefined;

/**
 * + Product code. Specify the template displayed on the voucher (list of Categories and Brands). + If no transmission will use Got It's default productId
 * @member {Number} productId
 */
REQUESTCREATEVOUCHERLINKE.prototype['productId'] = undefined;

/**
 * = 1 if the end user is required to enter a password to view the voucher. Example: 1
 * @member {Number} use_otp
 */
REQUESTCREATEVOUCHERLINKE.prototype['use_otp'] = undefined;

/**
 * = 1 if OTP is sent via phone number; = 7 if OTP is sent via email; = 8 if password Password is a fixed number - passed in param 'password' For example: 1
 * @member {Number} otp_type
 */
REQUESTCREATEVOUCHERLINKE.prototype['otp_type'] = undefined;

/**
 * Fixed password (corresponding to otp_type=8 passed in parram 'otp_type'. For otp_type = 1 or 7 do not need to be passed integero this field). Format requirement: 6 consecutive integer characters Example: '325243'
 * @member {String} password
 */
REQUESTCREATEVOUCHERLINKE.prototype['password'] = undefined;

/**
 * Voucher recipient name Example: Son Tran
 * @member {String} receiver_name
 */
REQUESTCREATEVOUCHERLINKE.prototype['receiver_name'] = undefined;

/**
 * Phone number to receive the voucher. This is only the step to identify the phone number that will receive the voucher. This step has not been completed yet. Sending vouchers, sending vouchers via SMS will be a separate API section. This phone number is also used to receive OTP when the end-user opens the voucher link, respectively otp_type = 1. Request format: 10 consecutive integer characters. For example: 0909xxxxxx
 * @member {String} phone
 */
REQUESTCREATEVOUCHERLINKE.prototype['phone'] = undefined;

/**
 * Email to receive the voucher. This is just the step to identify the email address that will receive the voucher. This step does not include sending the voucher, sending the voucher via email will be a separate API section. This email address is also used to receive OTP when the end-user opens the voucher link, corresponding to otp_type = 7 . For example: son.tran@ dayone.vn
 * @member {String} email
 */
REQUESTCREATEVOUCHERLINKE.prototype['email'] = undefined;

/**
 * RSA encryption, used for client authentication
 * @member {String} signature
 */
REQUESTCREATEVOUCHERLINKE.prototype['signature'] = undefined;






export default REQUESTCREATEVOUCHERLINKE;

