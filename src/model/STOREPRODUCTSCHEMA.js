/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The STOREPRODUCTSCHEMA model module.
 * @module model/STOREPRODUCTSCHEMA
 * @version 4.0.0
 */
class STOREPRODUCTSCHEMA {
    /**
     * Constructs a new <code>STOREPRODUCTSCHEMA</code>.
     * @alias module:model/STOREPRODUCTSCHEMA
     */
    constructor() { 
        
        STOREPRODUCTSCHEMA.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>STOREPRODUCTSCHEMA</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/STOREPRODUCTSCHEMA} obj Optional instance to populate.
     * @return {module:model/STOREPRODUCTSCHEMA} The populated <code>STOREPRODUCTSCHEMA</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new STOREPRODUCTSCHEMA();

            if (data.hasOwnProperty('storeId')) {
                obj['storeId'] = ApiClient.convertToType(data['storeId'], 'Number');
            }
            if (data.hasOwnProperty('storeNm')) {
                obj['storeNm'] = ApiClient.convertToType(data['storeNm'], 'String');
            }
            if (data.hasOwnProperty('storeAddr')) {
                obj['storeAddr'] = ApiClient.convertToType(data['storeAddr'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('long')) {
                obj['long'] = ApiClient.convertToType(data['long'], 'Number');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('city_id')) {
                obj['city_id'] = ApiClient.convertToType(data['city_id'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('dist_id')) {
                obj['dist_id'] = ApiClient.convertToType(data['dist_id'], 'Number');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>STOREPRODUCTSCHEMA</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>STOREPRODUCTSCHEMA</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['storeNm'] && !(typeof data['storeNm'] === 'string' || data['storeNm'] instanceof String)) {
            throw new Error("Expected the field `storeNm` to be a primitive type in the JSON string but got " + data['storeNm']);
        }
        // ensure the json data is a string
        if (data['storeAddr'] && !(typeof data['storeAddr'] === 'string' || data['storeAddr'] instanceof String)) {
            throw new Error("Expected the field `storeAddr` to be a primitive type in the JSON string but got " + data['storeAddr']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }

        return true;
    }


}



/**
 * Store Id
 * @member {Number} storeId
 */
STOREPRODUCTSCHEMA.prototype['storeId'] = undefined;

/**
 * Store Name
 * @member {String} storeNm
 */
STOREPRODUCTSCHEMA.prototype['storeNm'] = undefined;

/**
 * Store Address
 * @member {String} storeAddr
 */
STOREPRODUCTSCHEMA.prototype['storeAddr'] = undefined;

/**
 * Lat location on Google maps
 * @member {Number} lat
 */
STOREPRODUCTSCHEMA.prototype['lat'] = undefined;

/**
 * Long location on Google maps
 * @member {Number} long
 */
STOREPRODUCTSCHEMA.prototype['long'] = undefined;

/**
 * Store Phone
 * @member {String} phone
 */
STOREPRODUCTSCHEMA.prototype['phone'] = undefined;

/**
 * City code (Got It identifier)
 * @member {Number} city_id
 */
STOREPRODUCTSCHEMA.prototype['city_id'] = undefined;

/**
 * City name
 * @member {String} city
 */
STOREPRODUCTSCHEMA.prototype['city'] = undefined;

/**
 * District code (Got It identifier)
 * @member {Number} dist_id
 */
STOREPRODUCTSCHEMA.prototype['dist_id'] = undefined;

/**
 * District name
 * @member {String} district
 */
STOREPRODUCTSCHEMA.prototype['district'] = undefined;






export default STOREPRODUCTSCHEMA;

