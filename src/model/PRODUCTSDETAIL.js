/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PRODUCTPRICESCHEMA from './PRODUCTPRICESCHEMA';
import STORESSCHEMA from './STORESSCHEMA';

/**
 * The PRODUCTSDETAIL model module.
 * @module model/PRODUCTSDETAIL
 * @version 4.0.0
 */
class PRODUCTSDETAIL {
    /**
     * Constructs a new <code>PRODUCTSDETAIL</code>.
     * @alias module:model/PRODUCTSDETAIL
     */
    constructor() { 
        
        PRODUCTSDETAIL.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PRODUCTSDETAIL</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PRODUCTSDETAIL} obj Optional instance to populate.
     * @return {module:model/PRODUCTSDETAIL} The populated <code>PRODUCTSDETAIL</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PRODUCTSDETAIL();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('productNm')) {
                obj['productNm'] = ApiClient.convertToType(data['productNm'], 'String');
            }
            if (data.hasOwnProperty('productImg')) {
                obj['productImg'] = ApiClient.convertToType(data['productImg'], 'String');
            }
            if (data.hasOwnProperty('productDesc')) {
                obj['productDesc'] = ApiClient.convertToType(data['productDesc'], 'String');
            }
            if (data.hasOwnProperty('productShortDesc')) {
                obj['productShortDesc'] = ApiClient.convertToType(data['productShortDesc'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], 'String');
            }
            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'Number');
            }
            if (data.hasOwnProperty('brandNm')) {
                obj['brandNm'] = ApiClient.convertToType(data['brandNm'], 'String');
            }
            if (data.hasOwnProperty('brandLogo')) {
                obj['brandLogo'] = ApiClient.convertToType(data['brandLogo'], 'String');
            }
            if (data.hasOwnProperty('brandServiceGuide')) {
                obj['brandServiceGuide'] = ApiClient.convertToType(data['brandServiceGuide'], 'String');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('categoryNm')) {
                obj['categoryNm'] = ApiClient.convertToType(data['categoryNm'], 'String');
            }
            if (data.hasOwnProperty('categoryImg')) {
                obj['categoryImg'] = ApiClient.convertToType(data['categoryImg'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [PRODUCTPRICESCHEMA]);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('storeList')) {
                obj['storeList'] = ApiClient.convertToType(data['storeList'], [STORESSCHEMA]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PRODUCTSDETAIL</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PRODUCTSDETAIL</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['productNm'] && !(typeof data['productNm'] === 'string' || data['productNm'] instanceof String)) {
            throw new Error("Expected the field `productNm` to be a primitive type in the JSON string but got " + data['productNm']);
        }
        // ensure the json data is a string
        if (data['productImg'] && !(typeof data['productImg'] === 'string' || data['productImg'] instanceof String)) {
            throw new Error("Expected the field `productImg` to be a primitive type in the JSON string but got " + data['productImg']);
        }
        // ensure the json data is a string
        if (data['productDesc'] && !(typeof data['productDesc'] === 'string' || data['productDesc'] instanceof String)) {
            throw new Error("Expected the field `productDesc` to be a primitive type in the JSON string but got " + data['productDesc']);
        }
        // ensure the json data is a string
        if (data['productShortDesc'] && !(typeof data['productShortDesc'] === 'string' || data['productShortDesc'] instanceof String)) {
            throw new Error("Expected the field `productShortDesc` to be a primitive type in the JSON string but got " + data['productShortDesc']);
        }
        // ensure the json data is a string
        if (data['terms'] && !(typeof data['terms'] === 'string' || data['terms'] instanceof String)) {
            throw new Error("Expected the field `terms` to be a primitive type in the JSON string but got " + data['terms']);
        }
        // ensure the json data is a string
        if (data['brandNm'] && !(typeof data['brandNm'] === 'string' || data['brandNm'] instanceof String)) {
            throw new Error("Expected the field `brandNm` to be a primitive type in the JSON string but got " + data['brandNm']);
        }
        // ensure the json data is a string
        if (data['brandLogo'] && !(typeof data['brandLogo'] === 'string' || data['brandLogo'] instanceof String)) {
            throw new Error("Expected the field `brandLogo` to be a primitive type in the JSON string but got " + data['brandLogo']);
        }
        // ensure the json data is a string
        if (data['brandServiceGuide'] && !(typeof data['brandServiceGuide'] === 'string' || data['brandServiceGuide'] instanceof String)) {
            throw new Error("Expected the field `brandServiceGuide` to be a primitive type in the JSON string but got " + data['brandServiceGuide']);
        }
        // ensure the json data is a string
        if (data['categoryNm'] && !(typeof data['categoryNm'] === 'string' || data['categoryNm'] instanceof String)) {
            throw new Error("Expected the field `categoryNm` to be a primitive type in the JSON string but got " + data['categoryNm']);
        }
        // ensure the json data is a string
        if (data['categoryImg'] && !(typeof data['categoryImg'] === 'string' || data['categoryImg'] instanceof String)) {
            throw new Error("Expected the field `categoryImg` to be a primitive type in the JSON string but got " + data['categoryImg']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        if (data['prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prices'])) {
                throw new Error("Expected the field `prices` to be an array in the JSON data but got " + data['prices']);
            }
            // validate the optional field `prices` (array)
            for (const item of data['prices']) {
                PRODUCTPRICESCHEMA.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        if (data['storeList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storeList'])) {
                throw new Error("Expected the field `storeList` to be an array in the JSON data but got " + data['storeList']);
            }
            // validate the optional field `storeList` (array)
            for (const item of data['storeList']) {
                STORESSCHEMA.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Product Id
 * @member {Number} productId
 */
PRODUCTSDETAIL.prototype['productId'] = undefined;

/**
 * Product Name
 * @member {String} productNm
 */
PRODUCTSDETAIL.prototype['productNm'] = undefined;

/**
 * Link product image
 * @member {String} productImg
 */
PRODUCTSDETAIL.prototype['productImg'] = undefined;

/**
 * Product Description
 * @member {String} productDesc
 */
PRODUCTSDETAIL.prototype['productDesc'] = undefined;

/**
 * Product Short Description
 * @member {String} productShortDesc
 */
PRODUCTSDETAIL.prototype['productShortDesc'] = undefined;

/**
 * Terms of use
 * @member {String} terms
 */
PRODUCTSDETAIL.prototype['terms'] = undefined;

/**
 * Brand id
 * @member {Number} brandId
 */
PRODUCTSDETAIL.prototype['brandId'] = undefined;

/**
 * Brand name
 * @member {String} brandNm
 */
PRODUCTSDETAIL.prototype['brandNm'] = undefined;

/**
 * Link to brand logo image
 * @member {String} brandLogo
 */
PRODUCTSDETAIL.prototype['brandLogo'] = undefined;

/**
 * T&C of brand
 * @member {String} brandServiceGuide
 */
PRODUCTSDETAIL.prototype['brandServiceGuide'] = undefined;

/**
 * Category Id
 * @member {Number} categoryId
 */
PRODUCTSDETAIL.prototype['categoryId'] = undefined;

/**
 * Category Name
 * @member {String} categoryNm
 */
PRODUCTSDETAIL.prototype['categoryNm'] = undefined;

/**
 * Category Image
 * @member {String} categoryImg
 */
PRODUCTSDETAIL.prototype['categoryImg'] = undefined;

/**
 * c (cash) hoặc i (item)
 * @member {String} productType
 */
PRODUCTSDETAIL.prototype['productType'] = undefined;

/**
 * @member {Array.<module:model/PRODUCTPRICESCHEMA>} prices
 */
PRODUCTSDETAIL.prototype['prices'] = undefined;

/**
 * @member {String} link
 */
PRODUCTSDETAIL.prototype['link'] = undefined;

/**
 * @member {Array.<module:model/STORESSCHEMA>} storeList
 */
PRODUCTSDETAIL.prototype['storeList'] = undefined;






export default PRODUCTSDETAIL;

