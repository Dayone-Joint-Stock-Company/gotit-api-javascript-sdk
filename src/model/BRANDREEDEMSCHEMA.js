/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BRANDREEDEMSCHEMA model module.
 * @module model/BRANDREEDEMSCHEMA
 * @version 4.0.0
 */
class BRANDREEDEMSCHEMA {
    /**
     * Constructs a new <code>BRANDREEDEMSCHEMA</code>.
     * @alias module:model/BRANDREEDEMSCHEMA
     */
    constructor() { 
        
        BRANDREEDEMSCHEMA.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BRANDREEDEMSCHEMA</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BRANDREEDEMSCHEMA} obj Optional instance to populate.
     * @return {module:model/BRANDREEDEMSCHEMA} The populated <code>BRANDREEDEMSCHEMA</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BRANDREEDEMSCHEMA();

            if (data.hasOwnProperty('brandID')) {
                obj['brandID'] = ApiClient.convertToType(data['brandID'], 'Number');
            }
            if (data.hasOwnProperty('brandName')) {
                obj['brandName'] = ApiClient.convertToType(data['brandName'], 'String');
            }
            if (data.hasOwnProperty('brandLogo')) {
                obj['brandLogo'] = ApiClient.convertToType(data['brandLogo'], 'String');
            }
            if (data.hasOwnProperty('brandNameSlug')) {
                obj['brandNameSlug'] = ApiClient.convertToType(data['brandNameSlug'], 'String');
            }
            if (data.hasOwnProperty('brandPhone')) {
                obj['brandPhone'] = ApiClient.convertToType(data['brandPhone'], 'String');
            }
            if (data.hasOwnProperty('brandAddress')) {
                obj['brandAddress'] = ApiClient.convertToType(data['brandAddress'], 'String');
            }
            if (data.hasOwnProperty('brandDesc')) {
                obj['brandDesc'] = ApiClient.convertToType(data['brandDesc'], 'String');
            }
            if (data.hasOwnProperty('brandServiceGuide')) {
                obj['brandServiceGuide'] = ApiClient.convertToType(data['brandServiceGuide'], 'String');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('categoryNm')) {
                obj['categoryNm'] = ApiClient.convertToType(data['categoryNm'], 'String');
            }
            if (data.hasOwnProperty('categoryImg')) {
                obj['categoryImg'] = ApiClient.convertToType(data['categoryImg'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BRANDREEDEMSCHEMA</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BRANDREEDEMSCHEMA</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandName'] && !(typeof data['brandName'] === 'string' || data['brandName'] instanceof String)) {
            throw new Error("Expected the field `brandName` to be a primitive type in the JSON string but got " + data['brandName']);
        }
        // ensure the json data is a string
        if (data['brandLogo'] && !(typeof data['brandLogo'] === 'string' || data['brandLogo'] instanceof String)) {
            throw new Error("Expected the field `brandLogo` to be a primitive type in the JSON string but got " + data['brandLogo']);
        }
        // ensure the json data is a string
        if (data['brandNameSlug'] && !(typeof data['brandNameSlug'] === 'string' || data['brandNameSlug'] instanceof String)) {
            throw new Error("Expected the field `brandNameSlug` to be a primitive type in the JSON string but got " + data['brandNameSlug']);
        }
        // ensure the json data is a string
        if (data['brandPhone'] && !(typeof data['brandPhone'] === 'string' || data['brandPhone'] instanceof String)) {
            throw new Error("Expected the field `brandPhone` to be a primitive type in the JSON string but got " + data['brandPhone']);
        }
        // ensure the json data is a string
        if (data['brandAddress'] && !(typeof data['brandAddress'] === 'string' || data['brandAddress'] instanceof String)) {
            throw new Error("Expected the field `brandAddress` to be a primitive type in the JSON string but got " + data['brandAddress']);
        }
        // ensure the json data is a string
        if (data['brandDesc'] && !(typeof data['brandDesc'] === 'string' || data['brandDesc'] instanceof String)) {
            throw new Error("Expected the field `brandDesc` to be a primitive type in the JSON string but got " + data['brandDesc']);
        }
        // ensure the json data is a string
        if (data['brandServiceGuide'] && !(typeof data['brandServiceGuide'] === 'string' || data['brandServiceGuide'] instanceof String)) {
            throw new Error("Expected the field `brandServiceGuide` to be a primitive type in the JSON string but got " + data['brandServiceGuide']);
        }
        // ensure the json data is a string
        if (data['categoryNm'] && !(typeof data['categoryNm'] === 'string' || data['categoryNm'] instanceof String)) {
            throw new Error("Expected the field `categoryNm` to be a primitive type in the JSON string but got " + data['categoryNm']);
        }
        // ensure the json data is a string
        if (data['categoryImg'] && !(typeof data['categoryImg'] === 'string' || data['categoryImg'] instanceof String)) {
            throw new Error("Expected the field `categoryImg` to be a primitive type in the JSON string but got " + data['categoryImg']);
        }

        return true;
    }


}



/**
 * Brand id
 * @member {Number} brandID
 */
BRANDREEDEMSCHEMA.prototype['brandID'] = undefined;

/**
 * Brand name
 * @member {String} brandName
 */
BRANDREEDEMSCHEMA.prototype['brandName'] = undefined;

/**
 * Link to brand logo image
 * @member {String} brandLogo
 */
BRANDREEDEMSCHEMA.prototype['brandLogo'] = undefined;

/**
 * Brand name slug
 * @member {String} brandNameSlug
 */
BRANDREEDEMSCHEMA.prototype['brandNameSlug'] = undefined;

/**
 * Brand Phone Number
 * @member {String} brandPhone
 */
BRANDREEDEMSCHEMA.prototype['brandPhone'] = undefined;

/**
 * Address of brand
 * @member {String} brandAddress
 */
BRANDREEDEMSCHEMA.prototype['brandAddress'] = undefined;

/**
 * Brand Description
 * @member {String} brandDesc
 */
BRANDREEDEMSCHEMA.prototype['brandDesc'] = undefined;

/**
 * Describe the brand's terms of reference (T&C). HTML format
 * @member {String} brandServiceGuide
 */
BRANDREEDEMSCHEMA.prototype['brandServiceGuide'] = undefined;

/**
 * Category Id
 * @member {Number} categoryId
 */
BRANDREEDEMSCHEMA.prototype['categoryId'] = undefined;

/**
 * Category Name
 * @member {String} categoryNm
 */
BRANDREEDEMSCHEMA.prototype['categoryNm'] = undefined;

/**
 * Category Image Logo
 * @member {String} categoryImg
 */
BRANDREEDEMSCHEMA.prototype['categoryImg'] = undefined;






export default BRANDREEDEMSCHEMA;

