/**
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The USAGEMETHODSCHEMA model module.
 * @module model/USAGEMETHODSCHEMA
 * @version 4.0.0
 */
class USAGEMETHODSCHEMA {
    /**
     * Constructs a new <code>USAGEMETHODSCHEMA</code>.
     * @alias module:model/USAGEMETHODSCHEMA
     */
    constructor() { 
        
        USAGEMETHODSCHEMA.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USAGEMETHODSCHEMA</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USAGEMETHODSCHEMA} obj Optional instance to populate.
     * @return {module:model/USAGEMETHODSCHEMA} The populated <code>USAGEMETHODSCHEMA</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USAGEMETHODSCHEMA();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('phone_1')) {
                obj['phone_1'] = ApiClient.convertToType(data['phone_1'], 'String');
            }
            if (data.hasOwnProperty('phone_2')) {
                obj['phone_2'] = ApiClient.convertToType(data['phone_2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USAGEMETHODSCHEMA</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USAGEMETHODSCHEMA</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['phone_1'] && !(typeof data['phone_1'] === 'string' || data['phone_1'] instanceof String)) {
            throw new Error("Expected the field `phone_1` to be a primitive type in the JSON string but got " + data['phone_1']);
        }
        // ensure the json data is a string
        if (data['phone_2'] && !(typeof data['phone_2'] === 'string' || data['phone_2'] instanceof String)) {
            throw new Error("Expected the field `phone_2` to be a primitive type in the JSON string but got " + data['phone_2']);
        }

        return true;
    }


}



/**
 * Type of method used 'AT_STORE': at the store 'HOTLINE': via hot line number 'WEBSITE': via website 'FORM': via order form 'BUY_IN_WEBVIEW': via web 'BUY_IN_APP': via App
 * @member {String} type
 */
USAGEMETHODSCHEMA.prototype['type'] = undefined;

/**
 * Method title
 * @member {String} title
 */
USAGEMETHODSCHEMA.prototype['title'] = undefined;

/**
 * Description of the method
 * @member {String} description
 */
USAGEMETHODSCHEMA.prototype['description'] = undefined;

/**
 * Number
 * @member {Number} order
 */
USAGEMETHODSCHEMA.prototype['order'] = undefined;

/**
 * Link to the usage method
 * @member {String} link
 */
USAGEMETHODSCHEMA.prototype['link'] = undefined;

/**
 * Phone number 1
 * @member {String} phone_1
 */
USAGEMETHODSCHEMA.prototype['phone_1'] = undefined;

/**
 * Phone number 2
 * @member {String} phone_2
 */
USAGEMETHODSCHEMA.prototype['phone_2'] = undefined;






export default USAGEMETHODSCHEMA;

